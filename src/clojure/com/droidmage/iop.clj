(ns com.droidmage.iop
  (:require [clojure.string :as s]
            [clojure.reflect :as reflect]))

(defn method-to-keyword
  [method]
  (let [n (str method)
        [head & tail :as s] (map s/lower-case (s/split n #"(?=[A-Z]+)"))]
    (keyword
     (str (s/join "-" (if (#{"is" "get"} head) tail s))
          (if (#{"is" "uses"} head) "?")))))

(defn public-methods
  [class]
  (->> (reflect/reflect class)
       (:members)
       (remove (partial instance? clojure.reflect.Constructor))
       (filter #(:public (:flags %)))))

(defn call-method [m arg]
  (list (symbol (str "." m)) arg))

(defn enum-to-keyword [^Object enum]
  (-> (.toString enum)
      (s/lower-case)
      (s/replace "_" "-")
      (keyword)))

(defmacro defobjectmap
  "Define a function that converts a java object of the given `type`
  to a map. The keywords are generated from the method names with
  `method-to-keyword`.

  `exclude` is a sequence of methods to avoid (methods with non-zero
  arity or which return void are automatically avoided).
  `post-key` is a map from method names to functions. The function is
  called on the return value of that method. If the method's return
  value is an Enum, then this defaults to `enum-to-keyword`.
  `keyname` is a map from method names to keys, these keys are used in
  place of the one generated by `method-to-keyword`."
  [name type & {:keys [doc exclude post-key keyname]}]
  (let [post (into {} post-key)
        exc  (into #{} exclude)
        kn   (into #{} keyname)
        arg# (-> (str type)
                 (s/split #"\.")
                 last
                 s/lower-case
                 symbol
                 (vary-meta assoc :tag type))]
    `(defn ~name ~@(if doc [doc])
       [~arg#]
       (if (map? ~arg#)
         ~arg#
         ~(->> (public-methods (eval type))
               (remove #(exc (:name %)))
               ;; (remove #(seq (:exception-types %)))
               (remove #(= (:return-type %) 'void))
               (filter #(= (count (:parameter-types %)) 0))
               (map (fn [{:keys [name return-type]}]
                      [(or (kn name) (method-to-keyword name))
                       (if-let [f (or (post name)
                                      (if (isa? (eval return-type)
                                                java.lang.Enum)
                                        `enum-to-keyword))]
                         (list f (call-method name arg#))
                         (call-method name arg#))]))
               (into {:object arg#}))))))
